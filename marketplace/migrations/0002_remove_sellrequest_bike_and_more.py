# Generated by Django 5.2 on 2025-04-19 01:37

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import marketplace.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("marketplace", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RemoveField(
            model_name="sellrequest",
            name="bike",
        ),
        migrations.AlterModelOptions(
            name="inspectionreport",
            options={"ordering": ["-created_at"]},
        ),
        migrations.AlterModelOptions(
            name="purchaseoffer",
            options={"ordering": ["-created_at"]},
        ),
        migrations.AlterModelOptions(
            name="sellrequest",
            options={"ordering": ["-created_at"]},
        ),
        migrations.RemoveField(
            model_name="inspectionreport",
            name="engine_score",
        ),
        migrations.RemoveField(
            model_name="inspectionreport",
            name="frame_score",
        ),
        migrations.RemoveField(
            model_name="inspectionreport",
            name="mechanic",
        ),
        migrations.RemoveField(
            model_name="inspectionreport",
            name="tyre_score",
        ),
        migrations.AddField(
            model_name="inspectionreport",
            name="brake_condition",
            field=models.IntegerField(
                choices=[
                    (1, "Poor"),
                    (2, "Below Average"),
                    (3, "Average"),
                    (4, "Good"),
                    (5, "Excellent"),
                ],
                default=1,
                help_text="Brake system condition rating",
            ),
        ),
        migrations.AddField(
            model_name="inspectionreport",
            name="electrical_condition",
            field=models.IntegerField(
                choices=[
                    (1, "Poor"),
                    (2, "Below Average"),
                    (3, "Average"),
                    (4, "Good"),
                    (5, "Excellent"),
                ],
                default=1,
                help_text="Electrical system condition rating",
            ),
        ),
        migrations.AddField(
            model_name="inspectionreport",
            name="engine_condition",
            field=models.IntegerField(
                choices=[
                    (1, "Poor"),
                    (2, "Below Average"),
                    (3, "Average"),
                    (4, "Good"),
                    (5, "Excellent"),
                ],
                default=1,
                help_text="Engine condition rating",
            ),
        ),
        migrations.AddField(
            model_name="inspectionreport",
            name="estimated_repair_cost",
            field=models.DecimalField(
                decimal_places=2,
                default=0,
                help_text="Estimated cost of repairs needed",
                max_digits=10,
            ),
        ),
        migrations.AddField(
            model_name="inspectionreport",
            name="frame_condition",
            field=models.IntegerField(
                choices=[
                    (1, "Poor"),
                    (2, "Below Average"),
                    (3, "Average"),
                    (4, "Good"),
                    (5, "Excellent"),
                ],
                default=1,
                help_text="Frame condition rating",
            ),
        ),
        migrations.AddField(
            model_name="inspectionreport",
            name="inspection_photos",
            field=models.JSONField(
                blank=True, default=list, help_text="List of inspection photo paths"
            ),
        ),
        migrations.AddField(
            model_name="inspectionreport",
            name="inspector",
            field=models.ForeignKey(
                blank=True,
                help_text="Inspector who performed the inspection",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="inspections",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="inspectionreport",
            name="overall_rating",
            field=models.IntegerField(
                choices=[
                    (1, "Poor"),
                    (2, "Below Average"),
                    (3, "Average"),
                    (4, "Good"),
                    (5, "Excellent"),
                ],
                default=1,
                editable=False,
                help_text="Overall vehicle condition rating (auto-calculated)",
            ),
        ),
        migrations.AddField(
            model_name="inspectionreport",
            name="paint_condition",
            field=models.IntegerField(
                choices=[
                    (1, "Poor"),
                    (2, "Below Average"),
                    (3, "Average"),
                    (4, "Good"),
                    (5, "Excellent"),
                ],
                default=1,
                help_text="Paint condition rating",
            ),
        ),
        migrations.AddField(
            model_name="inspectionreport",
            name="suspension_condition",
            field=models.IntegerField(
                choices=[
                    (1, "Poor"),
                    (2, "Below Average"),
                    (3, "Average"),
                    (4, "Good"),
                    (5, "Excellent"),
                ],
                default=1,
                help_text="Suspension condition rating",
            ),
        ),
        migrations.AddField(
            model_name="inspectionreport",
            name="transmission_condition",
            field=models.IntegerField(
                choices=[
                    (1, "Poor"),
                    (2, "Below Average"),
                    (3, "Average"),
                    (4, "Good"),
                    (5, "Excellent"),
                ],
                default=1,
                help_text="Transmission condition rating",
            ),
        ),
        migrations.AddField(
            model_name="inspectionreport",
            name="tyre_condition",
            field=models.IntegerField(
                choices=[
                    (1, "Poor"),
                    (2, "Below Average"),
                    (3, "Average"),
                    (4, "Good"),
                    (5, "Excellent"),
                ],
                default=1,
                help_text="Tyre condition rating",
            ),
        ),
        migrations.AddField(
            model_name="inspectionreport",
            name="updated_at",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name="purchaseoffer",
            name="counter_offer",
            field=models.DecimalField(
                blank=True,
                decimal_places=2,
                help_text="Counter offer from seller",
                max_digits=10,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="purchaseoffer",
            name="is_negotiable",
            field=models.BooleanField(
                default=True, help_text="Whether price is negotiable"
            ),
        ),
        migrations.AddField(
            model_name="purchaseoffer",
            name="market_value",
            field=models.DecimalField(
                decimal_places=2,
                default=0,
                help_text="Estimated market value",
                max_digits=10,
            ),
        ),
        migrations.AddField(
            model_name="purchaseoffer",
            name="price_breakdown",
            field=models.JSONField(
                blank=True,
                default=dict,
                help_text='Format: {"base_price": 1000, "deductions": {"tyres": -100}}',
            ),
        ),
        migrations.AddField(
            model_name="purchaseoffer",
            name="updated_at",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name="purchaseoffer",
            name="valid_until",
            field=models.DateTimeField(
                default=marketplace.models.get_default_valid_until,
                help_text="Offer validity period",
            ),
        ),
        migrations.AddField(
            model_name="sellrequest",
            name="contact_number",
            field=models.CharField(
                blank=True,
                default="",
                help_text="Contact number for pickup",
                max_length=15,
            ),
        ),
        migrations.AddField(
            model_name="sellrequest",
            name="pickup_address",
            field=models.TextField(
                blank=True, default="", help_text="Address for vehicle pickup"
            ),
        ),
        migrations.AddField(
            model_name="sellrequest",
            name="rejection_reason",
            field=models.TextField(
                blank=True, help_text="Reason if request is rejected", null=True
            ),
        ),
        migrations.AddField(
            model_name="sellrequest",
            name="updated_at",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AlterField(
            model_name="inspectionreport",
            name="passed",
            field=models.BooleanField(
                default=False,
                editable=False,
                help_text="Whether vehicle passed inspection (auto-calculated)",
            ),
        ),
        migrations.AlterField(
            model_name="inspectionreport",
            name="remarks",
            field=models.TextField(
                blank=True, default="", help_text="Additional inspection notes"
            ),
        ),
        migrations.AlterField(
            model_name="inspectionreport",
            name="sell_request",
            field=models.OneToOneField(
                help_text="Related sell request",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="inspection_report",
                to="marketplace.sellrequest",
            ),
        ),
        migrations.AlterField(
            model_name="purchaseoffer",
            name="accepted",
            field=models.BooleanField(
                default=False, help_text="Whether offer was accepted"
            ),
        ),
        migrations.AlterField(
            model_name="purchaseoffer",
            name="offer_price",
            field=models.DecimalField(
                decimal_places=2, default=0, help_text="Our offer price", max_digits=10
            ),
        ),
        migrations.AlterField(
            model_name="purchaseoffer",
            name="sell_request",
            field=models.OneToOneField(
                help_text="Related sell request",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="offer",
                to="marketplace.sellrequest",
            ),
        ),
        migrations.AlterField(
            model_name="sellrequest",
            name="documents",
            field=models.JSONField(
                blank=True,
                default=dict,
                help_text='Format: {"rc": "path", "insurance": "path", "puc": "path"}',
            ),
        ),
        migrations.AlterField(
            model_name="sellrequest",
            name="photos",
            field=models.JSONField(
                blank=True,
                default=list,
                help_text='List of photo paths: ["front_view", "back_view", etc.]',
            ),
        ),
        migrations.AlterField(
            model_name="sellrequest",
            name="pickup_slot",
            field=models.DateTimeField(
                default=django.utils.timezone.now, help_text="Scheduled pickup time"
            ),
        ),
        migrations.AlterField(
            model_name="sellrequest",
            name="status",
            field=models.CharField(
                choices=[
                    ("submitted", "Submitted"),
                    ("documents_verified", "Documents Verified"),
                    ("pickup_scheduled", "Pickup Scheduled"),
                    ("under_inspection", "Under Inspection"),
                    ("inspection_done", "Inspection Done"),
                    ("offer_made", "Offer Made"),
                    ("deal_closed", "Deal Closed"),
                    ("rejected", "Rejected"),
                ],
                default="submitted",
                help_text="Current status of sell request",
                max_length=30,
            ),
        ),
        migrations.AlterField(
            model_name="sellrequest",
            name="user",
            field=models.ForeignKey(
                help_text="User who wants to sell the vehicle",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="sell_requests",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="Vehicle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "vehicle_type",
                    models.CharField(
                        choices=[
                            ("bike", "Bike"),
                            ("scooter", "Scooter"),
                            ("electric_scooter", "Electric Scooter"),
                            ("electric_bike", "Electric Bike"),
                        ],
                        default="bike",
                        help_text="Type of two-wheeler",
                        max_length=20,
                    ),
                ),
                (
                    "brand",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Vehicle manufacturer",
                        max_length=50,
                    ),
                ),
                (
                    "model",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Vehicle model name",
                        max_length=50,
                    ),
                ),
                (
                    "year",
                    models.PositiveIntegerField(
                        default=marketplace.models.get_current_year,
                        help_text="Manufacturing year",
                        validators=[
                            django.core.validators.MinValueValidator(1900),
                            django.core.validators.MaxValueValidator(
                                marketplace.models.get_current_year
                            ),
                        ],
                    ),
                ),
                (
                    "registration_number",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Vehicle registration number",
                        max_length=20,
                        unique=True,
                    ),
                ),
                (
                    "kms_driven",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Total kilometers driven",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "fuel_type",
                    models.CharField(
                        choices=[("petrol", "Petrol"), ("electric", "Electric")],
                        default="petrol",
                        help_text="Fuel type (petrol/electric)",
                        max_length=10,
                    ),
                ),
                (
                    "engine_capacity",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Engine capacity in CC (petrol) or Watts (electric)",
                        null=True,
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        blank=True,
                        default="Not Specified",
                        help_text="Vehicle color",
                        max_length=30,
                    ),
                ),
                (
                    "last_service_date",
                    models.DateField(
                        blank=True, help_text="Date of last service", null=True
                    ),
                ),
                (
                    "insurance_valid_till",
                    models.DateField(
                        blank=True, help_text="Insurance validity date", null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("available", "Available"),
                            ("under_inspection", "Under Inspection"),
                            ("inspection_done", "Inspection Done"),
                            ("sold", "Sold"),
                        ],
                        default="under_inspection",
                        help_text="Current vehicle status",
                        max_length=20,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        help_text="Current owner of the vehicle",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="vehicles",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="sellrequest",
            name="vehicle",
            field=models.OneToOneField(
                blank=True,
                help_text="Vehicle being sold",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="sell_request",
                to="marketplace.vehicle",
            ),
        ),
        migrations.DeleteModel(
            name="Bike",
        ),
        migrations.AddIndex(
            model_name="vehicle",
            index=models.Index(
                fields=["vehicle_type", "brand", "model"],
                name="marketplace_vehicle_838c3f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="vehicle",
            index=models.Index(
                fields=["registration_number"], name="marketplace_registr_e3be92_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="vehicle",
            index=models.Index(fields=["status"], name="marketplace_status_d985c1_idx"),
        ),
    ]
